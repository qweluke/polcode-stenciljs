/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import { JSX } from '@stencil/core';


export namespace Components {
  interface PolocodeButton {
    'class': string;
    'disabled': boolean;
    'text': string;
    'type': string;
  }
  interface PolocodeInput {
    'class': string;
    'disabled': boolean;
    'error': string;
    'id': string;
    'labelTxt': string;
    'placeholder': string;
    'required': boolean;
    'type': string;
    'value': string;
  }
  interface PolocodeModal {
    'id': string;
    /**
    * https://stenciljs.com/docs/properties#reflect-properties-to-attributes In some cases it may be useful to keep a Prop in sync with an attribute. In this case you can use the reflectToAttr option in the @Prop() decorator:
    */
    'isVisible': boolean;
  }
}

declare namespace LocalJSX {
  interface PolocodeButton extends JSXBase.HTMLAttributes {
    'class'?: string;
    'disabled'?: boolean;
    'text'?: string;
    'type'?: string;
  }
  interface PolocodeInput extends JSXBase.HTMLAttributes {
    'class'?: string;
    'disabled'?: boolean;
    'error'?: string;
    'id'?: string;
    'labelTxt'?: string;
    'placeholder'?: string;
    'required'?: boolean;
    'type'?: string;
    'value'?: string;
  }
  interface PolocodeModal extends JSXBase.HTMLAttributes {
    'id'?: string;
    /**
    * https://stenciljs.com/docs/properties#reflect-properties-to-attributes In some cases it may be useful to keep a Prop in sync with an attribute. In this case you can use the reflectToAttr option in the @Prop() decorator:
    */
    'isVisible'?: boolean;
  }

  interface ElementInterfaces {
    'PolocodeButton': Components.PolocodeButton;
    'PolocodeInput': Components.PolocodeInput;
    'PolocodeModal': Components.PolocodeModal;
  }

  interface IntrinsicElements {
    'PolocodeButton': LocalJSX.PolocodeButton;
    'PolocodeInput': LocalJSX.PolocodeInput;
    'PolocodeModal': LocalJSX.PolocodeModal;
  }
}
export { LocalJSX as JSX };

declare module "@stencil/core" {
  export namespace JSX {
    interface ElementInterfaces extends LocalJSX.ElementInterfaces {}
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}

declare global {


  interface HTMLPolocodeButtonElement extends Components.PolocodeButton, HTMLStencilElement {}
  var HTMLPolocodeButtonElement: {
    prototype: HTMLPolocodeButtonElement;
    new (): HTMLPolocodeButtonElement;
  };

  interface HTMLPolocodeInputElement extends Components.PolocodeInput, HTMLStencilElement {}
  var HTMLPolocodeInputElement: {
    prototype: HTMLPolocodeInputElement;
    new (): HTMLPolocodeInputElement;
  };

  interface HTMLPolocodeModalElement extends Components.PolocodeModal, HTMLStencilElement {}
  var HTMLPolocodeModalElement: {
    prototype: HTMLPolocodeModalElement;
    new (): HTMLPolocodeModalElement;
  };
  interface HTMLElementTagNameMap {
    'polocode-button': HTMLPolocodeButtonElement
    'polocode-input': HTMLPolocodeInputElement
    'polocode-modal': HTMLPolocodeModalElement
  }

  interface ElementTagNameMap {
    'polocode-button': HTMLPolocodeButtonElement;
    'polocode-input': HTMLPolocodeInputElement;
    'polocode-modal': HTMLPolocodeModalElement;
  }
}

