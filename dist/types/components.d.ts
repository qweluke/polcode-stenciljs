/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import './stencil.core';




export namespace Components {

  interface PolocodeButton {
    'class': string;
    'disabled': boolean;
    'text': string;
    'type': string;
  }
  interface PolocodeButtonAttributes extends StencilHTMLAttributes {
    'class'?: string;
    'disabled'?: boolean;
    'text'?: string;
    'type'?: string;
  }

  interface PolocodeInput {
    'class': string;
    'disabled': boolean;
    'error': string;
    'id': string;
    'labelTxt': string;
    'placeholder': string;
    'required': boolean;
    'type': string;
    'value': string;
  }
  interface PolocodeInputAttributes extends StencilHTMLAttributes {
    'class'?: string;
    'disabled'?: boolean;
    'error'?: string;
    'id'?: string;
    'labelTxt'?: string;
    'placeholder'?: string;
    'required'?: boolean;
    'type'?: string;
    'value'?: string;
  }

  interface PolocodeModal {
    'id': string;
    /**
    * https://stenciljs.com/docs/properties#reflect-properties-to-attributes In some cases it may be useful to keep a Prop in sync with an attribute. In this case you can use the reflectToAttr option in the @Prop() decorator:
    */
    'isVisible': boolean;
  }
  interface PolocodeModalAttributes extends StencilHTMLAttributes {
    'id'?: string;
    /**
    * https://stenciljs.com/docs/properties#reflect-properties-to-attributes In some cases it may be useful to keep a Prop in sync with an attribute. In this case you can use the reflectToAttr option in the @Prop() decorator:
    */
    'isVisible'?: boolean;
  }
}

declare global {
  interface StencilElementInterfaces {
    'PolocodeButton': Components.PolocodeButton;
    'PolocodeInput': Components.PolocodeInput;
    'PolocodeModal': Components.PolocodeModal;
  }

  interface StencilIntrinsicElements {
    'polocode-button': Components.PolocodeButtonAttributes;
    'polocode-input': Components.PolocodeInputAttributes;
    'polocode-modal': Components.PolocodeModalAttributes;
  }


  interface HTMLPolocodeButtonElement extends Components.PolocodeButton, HTMLStencilElement {}
  var HTMLPolocodeButtonElement: {
    prototype: HTMLPolocodeButtonElement;
    new (): HTMLPolocodeButtonElement;
  };

  interface HTMLPolocodeInputElement extends Components.PolocodeInput, HTMLStencilElement {}
  var HTMLPolocodeInputElement: {
    prototype: HTMLPolocodeInputElement;
    new (): HTMLPolocodeInputElement;
  };

  interface HTMLPolocodeModalElement extends Components.PolocodeModal, HTMLStencilElement {}
  var HTMLPolocodeModalElement: {
    prototype: HTMLPolocodeModalElement;
    new (): HTMLPolocodeModalElement;
  };

  interface HTMLElementTagNameMap {
    'polocode-button': HTMLPolocodeButtonElement
    'polocode-input': HTMLPolocodeInputElement
    'polocode-modal': HTMLPolocodeModalElement
  }

  interface ElementTagNameMap {
    'polocode-button': HTMLPolocodeButtonElement;
    'polocode-input': HTMLPolocodeInputElement;
    'polocode-modal': HTMLPolocodeModalElement;
  }


}
